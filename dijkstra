grafo = {
    "nodoA": [("nodoB", 4), ("nodoC", 2)],
    "nodoB": [("nodoA", 4), ("nodoC", 1), ("nodoD", 5)],
    "nodoC": [("nodoA", 2), ("nodoB", 1), ("nodoD", 8), ("nodoE", 10)],
    "nodoD": [("nodoB", 5), ("nodoC", 8), ("nodoE", 2), ("nodoF", 6)],
    "nodoE": [("nodoC", 10), ("nodoD", 2), ("nodoF", 3)],
    "nodoF": [("nodoD", 6), ("nodoE", 3)]
}

def dijkstra(grafo, inicio):
    
    no_visitados = list(grafo.keys())
    distancias = {nodo: float('inf') for nodo in grafo}
    distancias[inicio] = 0
    sucesores = {nodo: set() for nodo in grafo}  

    while no_visitados:
        
        nodo_actual = min(no_visitados, key=lambda n: distancias[n])
        if distancias[nodo_actual] == float('inf'):
            break
        no_visitados.remove(nodo_actual)

        for vecino, peso in grafo[nodo_actual]:
            nueva_dist = distancias[nodo_actual] + peso
            if nueva_dist < distancias[vecino]:
                distancias[vecino] = nueva_dist
                sucesores[vecino] = {nodo_actual} 
                
            elif nueva_dist == distancias[vecino]:
                sucesores[vecino].add(nodo_actual)  

    def reunir_sucesores(nodo):
        if nodo == inicio:
            return set()
        total = set()
        for s in sucesores[nodo]:
            total.add(s)
            total.update(reunir_sucesores(s))
        return total

    tabla = {}
    for nodo in grafo:
        if nodo == inicio:
            tabla[nodo] = [0, ["ninguno"]]
        else:
            todos_sucesores = reunir_sucesores(nodo)
            if not todos_sucesores:
                todos_sucesores = {"ninguno"}
            tabla[nodo] = [distancias[nodo], list(todos_sucesores)]

    return tabla


tabla = dijkstra(grafo, "nodoA")

for nodo, (peso, sucesores) in tabla.items():
    print(f"|nodoA| a |{nodo} | -> | {peso} | pasando por | {', '.join(sucesores)} |")
