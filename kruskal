grafo = {
    "nodoA": [("nodoB", 1), ("nodoC", 2)],
    "nodoB": [("nodoA", 1), ("nodoD", 1), ("nodoC", 3)],
    "nodoC": [("nodoB", 3), ("nodoA", 2), ("nodoD", 2)],
    "nodoD": [("nodoB", 1), ("nodoC", 2)],
}

def kruskal(grafo):
    aristas = []
    for origen in grafo:
        for destino, peso in grafo[origen]:
            if (destino, origen, peso) not in aristas:
                aristas.append((origen, destino, peso))

    aristas.sort(key=lambda x: x[2])

    conjuntos = {nodo: {nodo} for nodo in grafo}

    mst = []
    costo_total = 0

    
    for origen, destino, peso in aristas:
        conjunto_origen = None
        conjunto_destino = None

        for conjunto in conjuntos.values():
            if origen in conjunto:
                conjunto_origen = conjunto
            if destino in conjunto:
                conjunto_destino = conjunto

        if conjunto_origen != conjunto_destino:
            mst.append((origen, destino, peso))
            costo_total += peso

            nuevo_conjunto = conjunto_origen.union(conjunto_destino)
            for nodo in nuevo_conjunto:
                conjuntos[nodo] = nuevo_conjunto

    return mst, costo_total


mst, costo = kruskal(grafo)

for salida, llegada, peso in mst:
    print(f" - de {salida} a {llegada} con costo: {peso}")

print(f"\nCosto total : {costo}")
